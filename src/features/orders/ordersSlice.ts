import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchOrders } from "./ordersApi";

export type Order = any;

export type OrdersState = {
  value?: Order[];
  status: "idle" | "loading" | "failed";
  page: number;
  totalPages?: number;
};

const initialState: OrdersState = {
  status: "idle",
  page: 0,
};

export const fetchAsync = createAsyncThunk(
  "orders/fetch",
  async (page: number) => {
    const response = await fetchOrders(page);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const ordersSlice = createSlice({
  name: "orders",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = "idle";
        Object.assign(state, action.payload);
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectOrders = (state: RootState) => state.orders;

export default ordersSlice.reducer;
